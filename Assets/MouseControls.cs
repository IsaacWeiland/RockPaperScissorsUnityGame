//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MouseControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MouseControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MouseControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MouseControls"",
    ""maps"": [
        {
            ""name"": ""UseMouse"",
            ""id"": ""a018f904-6b96-47ba-80f6-bd8a81f793d8"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""90e280d1-7d4a-4aad-8bfa-7410ca182a85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc9aab1b-910b-4a2d-b694-60032fb2e8bc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UseMouse
        m_UseMouse = asset.FindActionMap("UseMouse", throwIfNotFound: true);
        m_UseMouse_LeftClick = m_UseMouse.FindAction("LeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UseMouse
    private readonly InputActionMap m_UseMouse;
    private List<IUseMouseActions> m_UseMouseActionsCallbackInterfaces = new List<IUseMouseActions>();
    private readonly InputAction m_UseMouse_LeftClick;
    public struct UseMouseActions
    {
        private @MouseControls m_Wrapper;
        public UseMouseActions(@MouseControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_UseMouse_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_UseMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UseMouseActions set) { return set.Get(); }
        public void AddCallbacks(IUseMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_UseMouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UseMouseActionsCallbackInterfaces.Add(instance);
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
        }

        private void UnregisterCallbacks(IUseMouseActions instance)
        {
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
        }

        public void RemoveCallbacks(IUseMouseActions instance)
        {
            if (m_Wrapper.m_UseMouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUseMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_UseMouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UseMouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UseMouseActions @UseMouse => new UseMouseActions(this);
    public interface IUseMouseActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
    }
}
